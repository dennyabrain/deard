var CommentForm = require('./commentform')
var CommentList = require('./commentList')
var Loader = require('./loader')

module.exports = React.createClass({
	displayName: 'Content',

	contextTypes : {
		userKey : React.PropTypes.any,
		setUserKey : React.PropTypes.func,
		history : React.PropTypes.object	
	},
	getCommentsFromServer: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			cache: false,
			success: function(data){
				this.context.setUserKey(data.userKey)
				
				this.setState({loadingResponse: false, loaded: true, data:data.comments}, function() {
        				// Update the commentFormType on latest bot response.
					//var revComments = (data.comments).reverse();
					var revComments = (data.comments);
					
					
					for (var c in revComments) {
						console.log(revComments[c].commentFormType);
						if (revComments[c].type == "bot") {						
							if (this.state.commentFormType != revComments[c].commentFormType) {
								this.setState({commentFormType : revComments[c].commentFormType});
								console.log("COMMENT FORMT TYPE FROM SERVER")
								console.log(revComments[c].commentFormType)
							}
							break;
						}
					}
				});
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
				this.context.history.pushState(null, "/", {});
			}.bind(this)
		});
	},
	handleCommentSubmit: function(comment) {
		var comments = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.

		// comments.type, comments.text 

		comment.id = Date.now();
		// comment.author = this.context.userKey;
		comment.type = "user";
		var newComments = comments.concat([comment]);

		this.setState({data: newComments, loadingResponse: true});
		//this.disablePolling();

		$.ajax({
			url: this.props.url,
			dataType: 'json',
			type: 'POST',
			data: comment,
			success: function(data){
				console.log("success POST");
				console.log(data);
				// In order to "fake" the loading, disable comment polling until we're done
				// Wait 3 seconds, and then get new comments from server and re-enable polling.
				// setTimeout(function() {
				// 	this.setState({loadingResponse: false}, function() {
				// 		this.getCommentsFromServer();
				// 		//this.enablePolling();
				// 	});
				// }.bind(this), 3000);
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	getInitialState: function() {
		return {data:[], loaded: false, commentFormType: "nothing", status: 'disconnected'};
	}, 
	getDefaultProps : function() { 
		return {url:"/comments"}; 
	},
	// SOCKET STUFF
	componentWillMount: function() {
        this.socket = io.connect('http://' + document.domain + ':' + location.port);
        this.socket.on('connect', this.connect);
        this.socket.on('disconnect', this.disconnect);
        this.socket.on('insert',this.insert);
        // this.socket.on('insert',function(text){
        //     console.log('Got Event')
        // })
    },
    connect: function() {
    	this.setState({ status: 'connected' });
    	console.log("connected: "+ this.socket.id);
    },
    disconnect: function() {
    	this.setState({ status: 'disconnected' });
    },
    insert: function(comment) {
    	console.log(comment);
    	// NEED TO RENDER TEXT 
    },
	componentDidMount: function() {
		setTimeout(function() {
			this.getCommentsFromServer();
			//.enablePolling();
		}.bind(this), 1000);

		// this.socket.on('comments',function(text){
		//     console.log('getCommentsFromServer')
		//     this.getCommentsFromServer();
		// })
	},
	// componentWillUnmount: function() {
	// 	this.disablePolling();
	// },
	// enablePolling: function() {
	// 	this.checkInterval = setInterval(this.getCommentsFromServer, this.props.pollInterval);
	// },
	// disablePolling: function() {
	// 	clearInterval(this.checkInterval);
	// },
	render: function() {
		return (
			<div className="content main">
				{ this.state.loaded ? 
					(<CommentList data={this.state.data} loading={this.state.loadingResponse}/>) :
					(<Loader />)
				}
				<div className="commentFormArea">
					<div className="container">
						<CommentForm commentFormType={this.state.commentFormType} onCommentSubmit={this.handleCommentSubmit} />
					</div>
				</div>
			</div>
		)
	}
});