/*
- app
	- header
	  - title
	- body
	  - comment box
	- footer
	  - comment forms

App -> home
App -> secure signin -> generate key -> comment
App -> secure signin -> comment box

*/
//import { Router, Route, Link } from 'react-router'
var Route = ReactRouter.Route
var Link = ReactRouter.Link
var Router = ReactRouter.Router
var BrowserHistory = History.createHistory
var IndexRoute = ReactRouter.IndexRoute


var Comment = React.createClass({
	render: function() {
		return (
			<div className="comment tk-anonymous-pro">
				<h2 className="commentId">
					{this.props.id}
				</h2>
				{this.props.children}
			</div>
		)
	}
});


var CommentList = React.createClass({

	componentDidUpdate : function(props, states, context) {
	  if (this.props.data && props.data && this.props.data.length != props.data.length) {
		var last_comment_el = $('.comment').eq(this.props.data.length - 1).get( 0 );
		var pos = this.getPosition(last_comment_el);
		window.scrollTo(0,pos.y);
	  }
	},
	getPosition : function(element) {
	    var xPosition = 0;
	    var yPosition = 0;
	  
	    while(element) {
	        xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
	        yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
	        element = element.offsetParent;
	    }
	    return { x: xPosition, y: yPosition };
	},
	render: function() {
		var commentNodes = this.props.data.map(function(comment){
			return (
				<Comment key={comment.id}>
					{comment.text}
				</Comment>
			);
		});
		
		return (
			<div className="commentList" id="commentList">
				{commentNodes}
			</div>
		);
	}
});

var CommentForm = React.createClass({
	getInitialState: function() {
		return {text: ''};
	},
	handleTextChange: function(e) {
		this.setState({text: e.target.value});
	},
	handleSubmit: function(e) {
		e.preventDefault();
		var text = this.state.text.trim();
		if (!text) {
			return;
		}
		this.props.onCommentSubmit({text: text});
		this.setState({text: ''});

		var elem = document.getElementById('commentList');
  		elem.scrollTop = elem.scrollHeight;
	},
	render: function() {
		return (
			<form className="commentForm" onSubmit={this.handleSubmit}>
				<textarea className="form-control" type="text" 
				  placeholder="Say something... " 
				  value={this.state.text}
				  onChange={this.handleTextChange} />
				<input type="submit" value="Post" />
			</form>
		)
	}
});

var Content = React.createClass({
	contextTypes : {
		userKey : React.PropTypes.any	
	},
	/***************************************
		FOR DENNY: NEED TO MATCH AUTHOR 
	***************************************/
	getCommentsFromServer: function() { 
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			cache: false,
			success: function(data){
				this.setState({data:data});
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	handleCommentSubmit: function(comment) {
		var comments = this.state.data;
	    // Optimistically set an id on the new comment. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
	    comment.id = Date.now();
	    comment.author = this.context.userKey;
	    var newComments = comments.concat([comment]);
	    this.setState({data: newComments});
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			type: 'POST',
			data: comment,
			success: function(data){
				this.setState({data:data});
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	getInitialState: function() {
		return {data:[]};
	}, 
	getDefaultProps : function() { 
		return {url:"/api/comments", pollInterval: 2000}; 
	},
	componentDidMount: function() {
		this.getCommentsFromServer();
		this.checkInterval = setInterval(this.getCommentsFromServer, this.props.pollInterval);
	},
	componentWillUnmount: function() {
		clearInterval(this.checkInterval);
	},
	render: function() {
		return (
			<div className="content main">
				<CommentList data={this.state.data} /> 
				<div className="commentFormArea">
					<div className="container">
						<CommentForm onCommentSubmit={this.handleCommentSubmit} />
					</div>
				</div>
			</div>
		)
	}
});

var Login = React.createClass({
	contextTypes : {
		userKey : React.PropTypes.any,
		setUserKey : React.PropTypes.func,
		history : React.PropTypes.object
	},

	getInitialState: function() {
		return {userKey: null};
	},
	handleNewKeyChange: function(e) {
		this.setState({userKey: e.target.value});
	},
	handleNewKeySubmit: function(e) {
		e.preventDefault();
		var key = this.state.userKey.trim();
		if (!key) {
			return;
		}
		this.context.setUserKey(key);
		this.context.history.pushState(null, "/content", {});
	},
	render: function() {
		return (
			<div className="login main">
				<div className="new-user-area">
					<h2>Enter User Key</h2>
					<p>
						If you are new, create a new user key here.
						If you are a returning user, enter your user key here. 
					</p>
					<form className="logInForm" onSubmit={this.handleNewKeySubmit}>
						<input type="text" 
						  placeholder="Your user key " 
						  value={this.state.userKey}
				  		  onChange={this.handleNewKeyChange} />
						<input type="submit" value="Enter" />
					</form>
				</div>
			</div>
		)
	}
});




var Home = React.createClass({
	render: function() {
		return (
			<div className="home main">
				Home
			</div>
		)
	}
});

var Header = React.createClass({
	contextTypes: {
		userKey: React.PropTypes.any,
		setUserKey: React.PropTypes.func
	},
	logout: function() {
		this.context.setUserKey(null);
		//this.context.history.pushState(null, "/", {});
	},
	render: function() {
		return (
			<header>
				<div className="container">
					<div className="title">
						<h1 className="tk-anonymous-pro"><b>Diary Bot</b></h1>
					</div>
					<div className="right">
						{
							this.context.userKey == null ?
							(<Link to="/login">Login</Link>) :
							(<Link to="/" onClick={this.logout}>Logout</Link>)
						}
						
					</div>					
				</div>
			</header>
		)
	}
});

var App = React.createClass({
	childContextTypes: {
		userKey: React.PropTypes.any,
		setUserKey: React.PropTypes.func
	},
	getChildContext: function() {
		return {
			userKey: this.state.userKey,
			setUserKey: this.setUserKey
		};
	},
	getInitialState: function() {
		return {
			userKey: null
		}
	},
	setUserKey: function(key) {
		this.setState({
			userKey: key
		});
	},
	render: function() {
		return(
			<div className="container">
				<Header /> 
				{this.props.children}
			</div>
		)
	}
});


ReactDOM.render((
	<Router history={BrowserHistory()}>
	    <Route path="/" component={App}>
	      <IndexRoute component={Home} />
	      <Route path="login" component={Login} />
	      <Route path="content" component={Content} />
	    </Route>
	</Router>
), document.getElementById('app'));